{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.3.1\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "from tensorflow.keras.datasets import mnist\n",
    "import os\n",
    "from time import time\n",
    "print(tf.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# check point function\n",
    "\n",
    "def load(model, checkpoint_dir):\n",
    "    print(\" [*] Reading checkpoints...\")\n",
    "\n",
    "    ckpt = tf.train.get_checkpoint_state(checkpoint_dir)\n",
    "    if ckpt :\n",
    "        ckpt_name = os.path.basename(ckpt.model_checkpoint_path)\n",
    "        checkpoint = tf.train.Checkpoint(dnn=model)\n",
    "        checkpoint.restore(save_path=os.path.join(checkpoint_dir, ckpt_name))\n",
    "        counter = int(ckpt_name.split('-')[1])\n",
    "        print(\" [*] Success to read {}\".format(ckpt_name))\n",
    "        return True, counter\n",
    "    else:\n",
    "        print(\" [*] Failed to find a checkpoint\")\n",
    "        return False, 0\n",
    "\n",
    "def check_folder(dir):\n",
    "    if not os.path.exists(dir):\n",
    "        os.makedirs(dir)\n",
    "    return dir"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# mnist 데이터 로드\n",
    "def load_mnist():\n",
    "    (x_train, y_train),(x_test, y_test) = mnist.load_data()\n",
    "    \n",
    "    # channel을 하나 추기해서 tensorflow input shape양식으로 설정해준다\n",
    "    # tensorflow input shape : [batch_size, height, width, channel]\n",
    "    # axis : 몇번째 위치에 확장할 것인가\n",
    "    x_train = np.expand_dims(x_train, axis = -1) # [N, 28, 28] -> [N, 28, 28, 1]\n",
    "    x_test = np.expand_dims(x_test, axis = -1) # [N, 28, 28] -> [N, 28, 28, 1]\n",
    "    \n",
    "    # 정규화를 하면 학습을 더 빨리하고 Local optimum 에 빠지는 가능성을 줄일 수 있다\n",
    "    x_train, x_test = normalize(x_train, x_test) # [0 ~ 255] -> [0 ~ 1]\n",
    "    # One-hot 인코딩 ex) 3 = [0,0,0,3,0,0,0,0,0,0]\n",
    "    # to_categorical의 숫자는 데이터의 label의 개수\n",
    "    y_train = to_categorical(y_train, 10) # [N,] -> [N, 10]\n",
    "    y_test = to_categorical(y_test, 10) # [N,] -> [N, 10]\n",
    "    \n",
    "    return x_train, y_train, x_test, y_test\n",
    "    \n",
    "def normalize(x_train, x_test):\n",
    "    x_train = x_train.astype(np.float32) / 255.0\n",
    "    x_test = x_test.astype(np.float32) / 255.0\n",
    "    \n",
    "    return x_train, x_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# loss\n",
    "def loss_fn(model, images, labels):\n",
    "    # 모델에 이미지를 넣어서 그 모델이 이미지의 숫자 값이 뭔지 출력을 하고\n",
    "    logits = model(images, training=True)\n",
    "    # 출력값과 라벨과 softmax_cross_entropy를 이용해서 로스 구한다\n",
    "    loss = tf.reduce_mean(tf.keras.losses.categorical_crossentropy(y_pred=logits, y_true=labels, from_logits=True))\n",
    "    return loss\n",
    "\n",
    "# accuracy / 정확도\n",
    "def accuracy_fn(model, images, labels):\n",
    "    # 모델에 이미지를 넣어서 예의 이미지가 숫무자가 뭔지 구한다\n",
    "    logits = model(images, training=False)\n",
    "    # -1은 인덱스를 뜻한다 : [batch size, label_dim]\n",
    "    # tf.argmax() : logits과 labels에서 숫자가 큰값의 위치를 알려달라 = [label_dim](10개의 라벨 중에서 예측하는 값)\n",
    "    # tf.equal() : logits과 labels값이 같다면 True 다르면 False를 return\n",
    "    prediction = tf.equal(tf.argmax(logits, -1), tf.argmax(labels, -1))\n",
    "    # tf.cast(prediction, tf.float32) \n",
    "    # : prediction값을 숫자값으로 변환 -> accuracy를 구할 때 bollean값보다는 숫자값으로 해야 계산이 가능하기 때문 \n",
    "    # True = 1 / False = 0\n",
    "    accuracy = tf.reduce_mean(tf.cast(prediction, tf.float32))\n",
    "    return accuracy\n",
    "\n",
    "# gradient\n",
    "# loss에 해당하는 모델의 gradient값을 구하는 함수\n",
    "def grad(model, images, labels):\n",
    "    with tf.GradientTape() as tape:\n",
    "        loss = loss_fn(model, images, labels)\n",
    "    return tape.gradient(loss, model.variables)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def flatten():\n",
    "    return tf.keras.layers.Flatten()\n",
    "\n",
    "def dense(channel, weight_init):\n",
    "    # units = out channel, bias = 사용여부, kernel_initializer = weight_initialize\n",
    "    return tf.keras.layers.Dense(units=channel, use_bias=True, kernel_initializer=weight_init)\n",
    "\n",
    "def relu():\n",
    "    return tf.keras.layers.Activation(tf.keras.activations.relu)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create models <class>\n",
    "\n",
    "# * 클래스로 모델을 만드려면 'tf.keras_model' 상속 필수\n",
    "class create_model(tf.keras.Model):\n",
    "    # label_dim = 네트워크의 로짓을 구할 때 최종적으로 몇개의 아웃풋을 내보낼 것인지\n",
    "    def __init__(self,label_dim):\n",
    "        super(create_model, self).__init__()\n",
    "    \n",
    "        # initializer.RandomNormal() : 평균이 0 분산이 1인 가우시안 분포로 랜덤한 웨이트 설정\n",
    "        weight_init = tf.keras.initializers.RandomNormal()\n",
    "        # 모델정의\n",
    "        self.model = tf.keras.Sequential()\n",
    "\n",
    "        self.model.add(flatten()) # [N, 28, 28, 1] -> [N, 784]\n",
    "\n",
    "        for i in range(2):\n",
    "            # [N, 784] -> [N, 256] -> [N, 256]\n",
    "            self.model.add(dense(256, weight_init))\n",
    "            self.model.add(relu())\n",
    "\n",
    "        # 모델의 로짓구하기\n",
    "        self.model.add(dense(label_dim, weight_init)) # [N, 256] -> [N, 10]\n",
    "\n",
    "    # 모델을 불렀을 때 아웃풋을 어떻게 낼 것 인가\n",
    "    def call(self, x, training=None, mask=None):\n",
    "        x = self.model(x)\n",
    "\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create model <function>\n",
    "\n",
    "def create_model_function(label_dim) :\n",
    "    weight_init = tf.keras.initializers.RandomNormal()\n",
    "\n",
    "    model = tf.keras.Sequential()\n",
    "    model.add(flatten())\n",
    "\n",
    "    for i in range(2) :\n",
    "        model.add(dense(256, weight_init))\n",
    "        model.add(relu())\n",
    "\n",
    "    model.add(dense(label_dim, weight_init))\n",
    "\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# parameters\n",
    "\n",
    "\"\"\" dataset \"\"\"\n",
    "train_x, train_y, test_x, test_y = load_mnist()\n",
    "\n",
    "\"\"\" parameters \"\"\"\n",
    "learning_rate = 0.001\n",
    "batch_size = 128\n",
    "\n",
    "training_epochs = 1\n",
    "training_iterations = len(train_x) // batch_size\n",
    "\n",
    "label_dim = 10\n",
    "\n",
    "train_flag = True\n",
    "\n",
    "\"\"\" Graph Input using Dataset API \"\"\"\n",
    "# 데이터셋 API를 이용해서 각각의 데이터를 네트워크에 넣는 작업을 하기전에\n",
    "# train data = 60000장 / test = 10000장의 이미지를 가지고 있는데 한꺼번에 네트워크에 집어넣으면 네트워크에게 부담을 주게됨으로\n",
    "# 데이터들을 batch_size만큼 잘라서 넣어준다\n",
    "\n",
    "# shuffle(buffer_size = 100000) :데이터셋 섞기, buffer_size의 값은 데이터값보다 크게 설정한다\n",
    "\n",
    "# prefetch(buffer_size = batch_size)\n",
    "# : 네트워크가 데이터를 batch_size만큼 잘라서 학습을 하고 있을때 미리 메모리에 데이터를 batch_size만큼 잘라서 올려놓아라\n",
    "# -> 속도가 더 빨라진다\n",
    "\n",
    "# batch(batch_size) : batch를 batch_size 몇개만큼 던져줄 것인지\n",
    "\n",
    "# repeat() : 한번으로 끝내는 것이 아니라 계속해서 진행한다\n",
    "train_dataset = tf.data.Dataset.from_tensor_slices((train_x, train_y)).\\\n",
    "shuffle(buffer_size = 100000).\\\n",
    "prefetch(buffer_size = batch_size).\\\n",
    "batch(batch_size, drop_remainder=True)\n",
    "\n",
    "\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((test_x, test_y)).\\\n",
    "shuffle(buffer_size = 100000).\\\n",
    "prefetch(buffer_size = len(test_x)).\\\n",
    "batch(len(test_x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# model\n",
    "\"\"\" Model \"\"\"\n",
    "# class\n",
    "# network = create_model(label_dim)\n",
    "# function\n",
    "network = create_model_function(label_dim)\n",
    "\n",
    "\"\"\" Training \"\"\"\n",
    "# loss minimizer\n",
    "optimizer = tf.keras.optimizers.Adam(learning_rate=learning_rate)\n",
    "\n",
    "\"\"\" Writer \"\"\"\n",
    "checkpoint_dir = 'checkpoints'\n",
    "logs_dir = 'logs'\n",
    "\n",
    "model_dir = 'nn_relu'\n",
    "\n",
    "checkpoint_dir = os.path.join(checkpoint_dir, model_dir)\n",
    "check_folder(checkpoint_dir)\n",
    "checkpoint_prefix = os.path.join(checkpoint_dir, model_dir)\n",
    "logs_dir = os.path.join(logs_dir, model_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " [*] Reading checkpoints...\n",
      " [*] Failed to find a checkpoint\n",
      " [!] Load failed...\n",
      "Epoch: [ 0] [    0/  468] time: 0.2998, train_loss: 2.17447948, train_accuracy: 0.3672, test_Accuracy: 0.2339\n",
      "Epoch: [ 0] [    1/  468] time: 0.3658, train_loss: 2.13609362, train_accuracy: 0.4609, test_Accuracy: 0.3812\n",
      "Epoch: [ 0] [    2/  468] time: 0.4330, train_loss: 2.06130338, train_accuracy: 0.5547, test_Accuracy: 0.4464\n",
      "Epoch: [ 0] [    3/  468] time: 0.4961, train_loss: 2.00527143, train_accuracy: 0.5938, test_Accuracy: 0.5381\n",
      "Epoch: [ 0] [    4/  468] time: 0.5616, train_loss: 1.92125344, train_accuracy: 0.6562, test_Accuracy: 0.6158\n",
      "Epoch: [ 0] [    5/  468] time: 0.6247, train_loss: 1.84193099, train_accuracy: 0.6172, test_Accuracy: 0.6638\n",
      "Epoch: [ 0] [    6/  468] time: 0.6917, train_loss: 1.75568438, train_accuracy: 0.6719, test_Accuracy: 0.6785\n",
      "Epoch: [ 0] [    7/  468] time: 0.7549, train_loss: 1.60915434, train_accuracy: 0.7500, test_Accuracy: 0.6834\n",
      "Epoch: [ 0] [    8/  468] time: 0.8196, train_loss: 1.58541369, train_accuracy: 0.6875, test_Accuracy: 0.7014\n",
      "Epoch: [ 0] [    9/  468] time: 0.8826, train_loss: 1.41866720, train_accuracy: 0.7422, test_Accuracy: 0.7204\n",
      "Epoch: [ 0] [   10/  468] time: 0.9457, train_loss: 1.31045640, train_accuracy: 0.7422, test_Accuracy: 0.7375\n",
      "Epoch: [ 0] [   11/  468] time: 1.0104, train_loss: 1.25449741, train_accuracy: 0.7734, test_Accuracy: 0.7534\n",
      "Epoch: [ 0] [   12/  468] time: 1.0793, train_loss: 1.11535287, train_accuracy: 0.7422, test_Accuracy: 0.7714\n",
      "Epoch: [ 0] [   13/  468] time: 1.1429, train_loss: 1.10078073, train_accuracy: 0.7188, test_Accuracy: 0.7957\n",
      "Epoch: [ 0] [   14/  468] time: 1.2067, train_loss: 0.96494401, train_accuracy: 0.7969, test_Accuracy: 0.8087\n",
      "Epoch: [ 0] [   15/  468] time: 1.2693, train_loss: 0.88051653, train_accuracy: 0.8047, test_Accuracy: 0.8123\n",
      "Epoch: [ 0] [   16/  468] time: 1.3343, train_loss: 0.82201821, train_accuracy: 0.8203, test_Accuracy: 0.8034\n",
      "Epoch: [ 0] [   17/  468] time: 1.3971, train_loss: 0.82540321, train_accuracy: 0.7969, test_Accuracy: 0.8060\n",
      "Epoch: [ 0] [   18/  468] time: 1.4606, train_loss: 0.70111656, train_accuracy: 0.8516, test_Accuracy: 0.8206\n",
      "Epoch: [ 0] [   19/  468] time: 1.5239, train_loss: 0.66002560, train_accuracy: 0.8438, test_Accuracy: 0.8295\n",
      "Epoch: [ 0] [   20/  468] time: 1.5873, train_loss: 0.70075351, train_accuracy: 0.7891, test_Accuracy: 0.8334\n",
      "Epoch: [ 0] [   21/  468] time: 1.6563, train_loss: 0.59025884, train_accuracy: 0.8281, test_Accuracy: 0.8264\n",
      "Epoch: [ 0] [   22/  468] time: 1.7206, train_loss: 0.54429948, train_accuracy: 0.8594, test_Accuracy: 0.8233\n",
      "Epoch: [ 0] [   23/  468] time: 1.7887, train_loss: 0.53165901, train_accuracy: 0.8516, test_Accuracy: 0.8349\n",
      "Epoch: [ 0] [   24/  468] time: 1.8513, train_loss: 0.45900524, train_accuracy: 0.8203, test_Accuracy: 0.8462\n",
      "Epoch: [ 0] [   25/  468] time: 1.9170, train_loss: 0.50957865, train_accuracy: 0.8047, test_Accuracy: 0.8481\n",
      "Epoch: [ 0] [   26/  468] time: 1.9814, train_loss: 0.65920746, train_accuracy: 0.8125, test_Accuracy: 0.8476\n",
      "Epoch: [ 0] [   27/  468] time: 2.0497, train_loss: 0.64126790, train_accuracy: 0.7891, test_Accuracy: 0.8482\n",
      "Epoch: [ 0] [   28/  468] time: 2.1186, train_loss: 0.46220353, train_accuracy: 0.8750, test_Accuracy: 0.8580\n",
      "Epoch: [ 0] [   29/  468] time: 2.1870, train_loss: 0.40458244, train_accuracy: 0.8984, test_Accuracy: 0.8682\n",
      "Epoch: [ 0] [   30/  468] time: 2.2524, train_loss: 0.54781353, train_accuracy: 0.8594, test_Accuracy: 0.8764\n",
      "Epoch: [ 0] [   31/  468] time: 2.3218, train_loss: 0.39237940, train_accuracy: 0.8594, test_Accuracy: 0.8732\n",
      "Epoch: [ 0] [   32/  468] time: 2.3921, train_loss: 0.49958009, train_accuracy: 0.8125, test_Accuracy: 0.8696\n",
      "Epoch: [ 0] [   33/  468] time: 2.4570, train_loss: 0.39474162, train_accuracy: 0.8594, test_Accuracy: 0.8637\n",
      "Epoch: [ 0] [   34/  468] time: 2.5253, train_loss: 0.30609375, train_accuracy: 0.8984, test_Accuracy: 0.8673\n",
      "Epoch: [ 0] [   35/  468] time: 2.5885, train_loss: 0.62098658, train_accuracy: 0.8203, test_Accuracy: 0.8783\n",
      "Epoch: [ 0] [   36/  468] time: 2.6521, train_loss: 0.34840733, train_accuracy: 0.9062, test_Accuracy: 0.8776\n",
      "Epoch: [ 0] [   37/  468] time: 2.7144, train_loss: 0.44253036, train_accuracy: 0.8594, test_Accuracy: 0.8757\n",
      "Epoch: [ 0] [   38/  468] time: 2.7785, train_loss: 0.38116270, train_accuracy: 0.8906, test_Accuracy: 0.8760\n",
      "Epoch: [ 0] [   39/  468] time: 2.8471, train_loss: 0.32709241, train_accuracy: 0.9062, test_Accuracy: 0.8767\n",
      "Epoch: [ 0] [   40/  468] time: 2.9156, train_loss: 0.51177514, train_accuracy: 0.8516, test_Accuracy: 0.8816\n",
      "Epoch: [ 0] [   41/  468] time: 2.9807, train_loss: 0.36469716, train_accuracy: 0.8750, test_Accuracy: 0.8864\n",
      "Epoch: [ 0] [   42/  468] time: 3.0483, train_loss: 0.36568335, train_accuracy: 0.8984, test_Accuracy: 0.8917\n",
      "Epoch: [ 0] [   43/  468] time: 3.1106, train_loss: 0.37285456, train_accuracy: 0.8672, test_Accuracy: 0.8899\n",
      "Epoch: [ 0] [   44/  468] time: 3.1801, train_loss: 0.35941479, train_accuracy: 0.8984, test_Accuracy: 0.8871\n",
      "Epoch: [ 0] [   45/  468] time: 3.2480, train_loss: 0.33041620, train_accuracy: 0.9062, test_Accuracy: 0.8825\n",
      "Epoch: [ 0] [   46/  468] time: 3.3115, train_loss: 0.43527085, train_accuracy: 0.8828, test_Accuracy: 0.8858\n",
      "Epoch: [ 0] [   47/  468] time: 3.3804, train_loss: 0.37271923, train_accuracy: 0.9141, test_Accuracy: 0.8876\n",
      "Epoch: [ 0] [   48/  468] time: 3.4449, train_loss: 0.28431755, train_accuracy: 0.9375, test_Accuracy: 0.8957\n",
      "Epoch: [ 0] [   49/  468] time: 3.5124, train_loss: 0.33658111, train_accuracy: 0.9141, test_Accuracy: 0.8953\n",
      "Epoch: [ 0] [   50/  468] time: 3.5753, train_loss: 0.33839729, train_accuracy: 0.9219, test_Accuracy: 0.8968\n",
      "Epoch: [ 0] [   51/  468] time: 3.6385, train_loss: 0.37009400, train_accuracy: 0.9141, test_Accuracy: 0.8961\n",
      "Epoch: [ 0] [   52/  468] time: 3.7027, train_loss: 0.25325620, train_accuracy: 0.9375, test_Accuracy: 0.8972\n",
      "Epoch: [ 0] [   53/  468] time: 3.7664, train_loss: 0.32932740, train_accuracy: 0.9062, test_Accuracy: 0.9007\n",
      "Epoch: [ 0] [   54/  468] time: 3.8300, train_loss: 0.24040374, train_accuracy: 0.9062, test_Accuracy: 0.9021\n",
      "Epoch: [ 0] [   55/  468] time: 3.8938, train_loss: 0.28821951, train_accuracy: 0.8984, test_Accuracy: 0.9038\n",
      "Epoch: [ 0] [   56/  468] time: 3.9581, train_loss: 0.32324281, train_accuracy: 0.8984, test_Accuracy: 0.9035\n",
      "Epoch: [ 0] [   57/  468] time: 4.0216, train_loss: 0.24563406, train_accuracy: 0.9609, test_Accuracy: 0.9010\n",
      "Epoch: [ 0] [   58/  468] time: 4.0843, train_loss: 0.52870136, train_accuracy: 0.8984, test_Accuracy: 0.9015\n",
      "Epoch: [ 0] [   59/  468] time: 4.1475, train_loss: 0.38279840, train_accuracy: 0.9141, test_Accuracy: 0.9028\n",
      "Epoch: [ 0] [   60/  468] time: 4.2104, train_loss: 0.21196270, train_accuracy: 0.9297, test_Accuracy: 0.9026\n",
      "Epoch: [ 0] [   61/  468] time: 4.2734, train_loss: 0.33006451, train_accuracy: 0.9141, test_Accuracy: 0.9012\n",
      "Epoch: [ 0] [   62/  468] time: 4.3362, train_loss: 0.31104124, train_accuracy: 0.9141, test_Accuracy: 0.9024\n",
      "Epoch: [ 0] [   63/  468] time: 4.4005, train_loss: 0.18045703, train_accuracy: 0.9609, test_Accuracy: 0.9054\n",
      "Epoch: [ 0] [   64/  468] time: 4.4685, train_loss: 0.36725742, train_accuracy: 0.8672, test_Accuracy: 0.9080\n",
      "Epoch: [ 0] [   65/  468] time: 4.5321, train_loss: 0.28583485, train_accuracy: 0.8906, test_Accuracy: 0.9062\n",
      "Epoch: [ 0] [   66/  468] time: 4.5959, train_loss: 0.25440055, train_accuracy: 0.9219, test_Accuracy: 0.9057\n",
      "Epoch: [ 0] [   67/  468] time: 4.6593, train_loss: 0.40483892, train_accuracy: 0.8672, test_Accuracy: 0.9047\n",
      "Epoch: [ 0] [   68/  468] time: 4.7224, train_loss: 0.35085517, train_accuracy: 0.8984, test_Accuracy: 0.9031\n",
      "Epoch: [ 0] [   69/  468] time: 4.7910, train_loss: 0.41707498, train_accuracy: 0.9219, test_Accuracy: 0.9035\n",
      "Epoch: [ 0] [   70/  468] time: 4.8530, train_loss: 0.33872175, train_accuracy: 0.9141, test_Accuracy: 0.9057\n",
      "Epoch: [ 0] [   71/  468] time: 4.9173, train_loss: 0.38519776, train_accuracy: 0.8828, test_Accuracy: 0.9072\n",
      "Epoch: [ 0] [   72/  468] time: 4.9840, train_loss: 0.40527743, train_accuracy: 0.8516, test_Accuracy: 0.9054\n",
      "Epoch: [ 0] [   73/  468] time: 5.0516, train_loss: 0.33181408, train_accuracy: 0.9062, test_Accuracy: 0.9065\n",
      "Epoch: [ 0] [   74/  468] time: 5.1162, train_loss: 0.35662338, train_accuracy: 0.9062, test_Accuracy: 0.9063\n",
      "Epoch: [ 0] [   75/  468] time: 5.1824, train_loss: 0.26898801, train_accuracy: 0.9219, test_Accuracy: 0.9032\n",
      "Epoch: [ 0] [   76/  468] time: 5.2512, train_loss: 0.32280219, train_accuracy: 0.9453, test_Accuracy: 0.9087\n",
      "Epoch: [ 0] [   77/  468] time: 5.3164, train_loss: 0.27543563, train_accuracy: 0.9297, test_Accuracy: 0.9111\n",
      "Epoch: [ 0] [   78/  468] time: 5.3798, train_loss: 0.40835926, train_accuracy: 0.8750, test_Accuracy: 0.9141\n",
      "Epoch: [ 0] [   79/  468] time: 5.4487, train_loss: 0.28918871, train_accuracy: 0.9062, test_Accuracy: 0.9118\n",
      "Epoch: [ 0] [   80/  468] time: 5.5131, train_loss: 0.30134460, train_accuracy: 0.8984, test_Accuracy: 0.9101\n",
      "Epoch: [ 0] [   81/  468] time: 5.5831, train_loss: 0.35925928, train_accuracy: 0.8906, test_Accuracy: 0.9102\n",
      "Epoch: [ 0] [   82/  468] time: 5.6517, train_loss: 0.18756144, train_accuracy: 0.9375, test_Accuracy: 0.9090\n",
      "Epoch: [ 0] [   83/  468] time: 5.7150, train_loss: 0.25425094, train_accuracy: 0.9062, test_Accuracy: 0.9091\n",
      "Epoch: [ 0] [   84/  468] time: 5.7811, train_loss: 0.16467276, train_accuracy: 0.9531, test_Accuracy: 0.9072\n",
      "Epoch: [ 0] [   85/  468] time: 5.8457, train_loss: 0.40870032, train_accuracy: 0.8750, test_Accuracy: 0.9084\n",
      "Epoch: [ 0] [   86/  468] time: 5.9138, train_loss: 0.31662160, train_accuracy: 0.9062, test_Accuracy: 0.9091\n",
      "Epoch: [ 0] [   87/  468] time: 5.9823, train_loss: 0.16260216, train_accuracy: 0.9531, test_Accuracy: 0.9120\n",
      "Epoch: [ 0] [   88/  468] time: 6.0476, train_loss: 0.12694015, train_accuracy: 0.9609, test_Accuracy: 0.9180\n",
      "Epoch: [ 0] [   89/  468] time: 6.1153, train_loss: 0.28405538, train_accuracy: 0.8984, test_Accuracy: 0.9195\n",
      "Epoch: [ 0] [   90/  468] time: 6.1833, train_loss: 0.27949673, train_accuracy: 0.9297, test_Accuracy: 0.9187\n",
      "Epoch: [ 0] [   91/  468] time: 6.2516, train_loss: 0.27274090, train_accuracy: 0.9219, test_Accuracy: 0.9173\n",
      "Epoch: [ 0] [   92/  468] time: 6.3176, train_loss: 0.34638184, train_accuracy: 0.9141, test_Accuracy: 0.9165\n",
      "Epoch: [ 0] [   93/  468] time: 6.3860, train_loss: 0.19426626, train_accuracy: 0.9297, test_Accuracy: 0.9150\n",
      "Epoch: [ 0] [   94/  468] time: 6.4495, train_loss: 0.38218212, train_accuracy: 0.8828, test_Accuracy: 0.9149\n",
      "Epoch: [ 0] [   95/  468] time: 6.5137, train_loss: 0.17087971, train_accuracy: 0.9375, test_Accuracy: 0.9139\n",
      "Epoch: [ 0] [   96/  468] time: 6.5761, train_loss: 0.40203249, train_accuracy: 0.8984, test_Accuracy: 0.9132\n",
      "Epoch: [ 0] [   97/  468] time: 6.6384, train_loss: 0.27614787, train_accuracy: 0.9219, test_Accuracy: 0.9114\n",
      "Epoch: [ 0] [   98/  468] time: 6.7060, train_loss: 0.30200136, train_accuracy: 0.8984, test_Accuracy: 0.9156\n",
      "Epoch: [ 0] [   99/  468] time: 6.7700, train_loss: 0.40741110, train_accuracy: 0.8828, test_Accuracy: 0.9202\n",
      "Epoch: [ 0] [  100/  468] time: 6.8392, train_loss: 0.16105193, train_accuracy: 0.9531, test_Accuracy: 0.9196\n",
      "Epoch: [ 0] [  101/  468] time: 6.9025, train_loss: 0.25599444, train_accuracy: 0.9062, test_Accuracy: 0.9173\n",
      "Epoch: [ 0] [  102/  468] time: 6.9666, train_loss: 0.39325529, train_accuracy: 0.8828, test_Accuracy: 0.9174\n",
      "Epoch: [ 0] [  103/  468] time: 7.0297, train_loss: 0.34102613, train_accuracy: 0.9141, test_Accuracy: 0.9183\n",
      "Epoch: [ 0] [  104/  468] time: 7.0936, train_loss: 0.31973591, train_accuracy: 0.8984, test_Accuracy: 0.9204\n",
      "Epoch: [ 0] [  105/  468] time: 7.1616, train_loss: 0.23637700, train_accuracy: 0.9453, test_Accuracy: 0.9220\n",
      "Epoch: [ 0] [  106/  468] time: 7.2248, train_loss: 0.30098331, train_accuracy: 0.9219, test_Accuracy: 0.9233\n",
      "Epoch: [ 0] [  107/  468] time: 7.2951, train_loss: 0.23670007, train_accuracy: 0.9531, test_Accuracy: 0.9243\n",
      "Epoch: [ 0] [  108/  468] time: 7.3625, train_loss: 0.27265298, train_accuracy: 0.9141, test_Accuracy: 0.9243\n",
      "Epoch: [ 0] [  109/  468] time: 7.4304, train_loss: 0.20463867, train_accuracy: 0.9531, test_Accuracy: 0.9239\n",
      "Epoch: [ 0] [  110/  468] time: 7.4941, train_loss: 0.24691999, train_accuracy: 0.9297, test_Accuracy: 0.9230\n",
      "Epoch: [ 0] [  111/  468] time: 7.5623, train_loss: 0.37959579, train_accuracy: 0.8906, test_Accuracy: 0.9205\n",
      "Epoch: [ 0] [  112/  468] time: 7.6309, train_loss: 0.24852113, train_accuracy: 0.9297, test_Accuracy: 0.9191\n",
      "Epoch: [ 0] [  113/  468] time: 7.6945, train_loss: 0.23426847, train_accuracy: 0.9141, test_Accuracy: 0.9138\n",
      "Epoch: [ 0] [  114/  468] time: 7.7579, train_loss: 0.31399700, train_accuracy: 0.8984, test_Accuracy: 0.9116\n",
      "Epoch: [ 0] [  115/  468] time: 7.8261, train_loss: 0.27566689, train_accuracy: 0.9297, test_Accuracy: 0.9141\n",
      "Epoch: [ 0] [  116/  468] time: 7.8938, train_loss: 0.31806841, train_accuracy: 0.8906, test_Accuracy: 0.9183\n",
      "Epoch: [ 0] [  117/  468] time: 7.9613, train_loss: 0.35215485, train_accuracy: 0.9062, test_Accuracy: 0.9215\n",
      "Epoch: [ 0] [  118/  468] time: 8.0268, train_loss: 0.24698733, train_accuracy: 0.9219, test_Accuracy: 0.9236\n",
      "Epoch: [ 0] [  119/  468] time: 8.0954, train_loss: 0.20868543, train_accuracy: 0.9453, test_Accuracy: 0.9213\n",
      "Epoch: [ 0] [  120/  468] time: 8.1579, train_loss: 0.16707224, train_accuracy: 0.9453, test_Accuracy: 0.9175\n",
      "Epoch: [ 0] [  121/  468] time: 8.2268, train_loss: 0.23047109, train_accuracy: 0.9297, test_Accuracy: 0.9172\n",
      "Epoch: [ 0] [  122/  468] time: 8.2964, train_loss: 0.25319290, train_accuracy: 0.9453, test_Accuracy: 0.9185\n",
      "Epoch: [ 0] [  123/  468] time: 8.3584, train_loss: 0.35483158, train_accuracy: 0.9062, test_Accuracy: 0.9184\n",
      "Epoch: [ 0] [  124/  468] time: 8.4216, train_loss: 0.32811809, train_accuracy: 0.8984, test_Accuracy: 0.9238\n",
      "Epoch: [ 0] [  125/  468] time: 8.4862, train_loss: 0.27982819, train_accuracy: 0.9141, test_Accuracy: 0.9268\n",
      "Epoch: [ 0] [  126/  468] time: 8.5546, train_loss: 0.26992899, train_accuracy: 0.8984, test_Accuracy: 0.9258\n",
      "Epoch: [ 0] [  127/  468] time: 8.6191, train_loss: 0.24577981, train_accuracy: 0.9219, test_Accuracy: 0.9209\n",
      "Epoch: [ 0] [  128/  468] time: 8.6866, train_loss: 0.22933549, train_accuracy: 0.9453, test_Accuracy: 0.9164\n",
      "Epoch: [ 0] [  129/  468] time: 8.7516, train_loss: 0.27929986, train_accuracy: 0.8828, test_Accuracy: 0.9184\n",
      "Epoch: [ 0] [  130/  468] time: 8.8151, train_loss: 0.23538795, train_accuracy: 0.9297, test_Accuracy: 0.9206\n",
      "Epoch: [ 0] [  131/  468] time: 8.8786, train_loss: 0.16736233, train_accuracy: 0.9453, test_Accuracy: 0.9214\n",
      "Epoch: [ 0] [  132/  468] time: 8.9435, train_loss: 0.19337633, train_accuracy: 0.9453, test_Accuracy: 0.9199\n",
      "Epoch: [ 0] [  133/  468] time: 9.0091, train_loss: 0.31487745, train_accuracy: 0.8984, test_Accuracy: 0.9186\n",
      "Epoch: [ 0] [  134/  468] time: 9.0776, train_loss: 0.14604527, train_accuracy: 0.9688, test_Accuracy: 0.9165\n",
      "Epoch: [ 0] [  135/  468] time: 9.1371, train_loss: 0.32893911, train_accuracy: 0.8672, test_Accuracy: 0.9139\n",
      "Epoch: [ 0] [  136/  468] time: 9.1991, train_loss: 0.27104205, train_accuracy: 0.8984, test_Accuracy: 0.9170\n",
      "Epoch: [ 0] [  137/  468] time: 9.2640, train_loss: 0.36724967, train_accuracy: 0.8984, test_Accuracy: 0.9239\n",
      "Epoch: [ 0] [  138/  468] time: 9.3239, train_loss: 0.16866742, train_accuracy: 0.9375, test_Accuracy: 0.9284\n",
      "Epoch: [ 0] [  139/  468] time: 9.3876, train_loss: 0.31057745, train_accuracy: 0.8984, test_Accuracy: 0.9327\n",
      "Epoch: [ 0] [  140/  468] time: 9.4499, train_loss: 0.15757810, train_accuracy: 0.9609, test_Accuracy: 0.9318\n",
      "Epoch: [ 0] [  141/  468] time: 9.5121, train_loss: 0.28419375, train_accuracy: 0.9531, test_Accuracy: 0.9290\n",
      "Epoch: [ 0] [  142/  468] time: 9.5747, train_loss: 0.20472434, train_accuracy: 0.9297, test_Accuracy: 0.9267\n",
      "Epoch: [ 0] [  143/  468] time: 9.6381, train_loss: 0.22710709, train_accuracy: 0.9141, test_Accuracy: 0.9278\n",
      "Epoch: [ 0] [  144/  468] time: 9.7007, train_loss: 0.22363508, train_accuracy: 0.9453, test_Accuracy: 0.9279\n",
      "Epoch: [ 0] [  145/  468] time: 9.7613, train_loss: 0.21612276, train_accuracy: 0.9219, test_Accuracy: 0.9307\n",
      "Epoch: [ 0] [  146/  468] time: 9.8241, train_loss: 0.25291651, train_accuracy: 0.9297, test_Accuracy: 0.9327\n",
      "Epoch: [ 0] [  147/  468] time: 9.8860, train_loss: 0.15716471, train_accuracy: 0.9609, test_Accuracy: 0.9336\n",
      "Epoch: [ 0] [  148/  468] time: 9.9476, train_loss: 0.17869177, train_accuracy: 0.9531, test_Accuracy: 0.9336\n",
      "Epoch: [ 0] [  149/  468] time: 10.0174, train_loss: 0.17013067, train_accuracy: 0.9688, test_Accuracy: 0.9336\n",
      "Epoch: [ 0] [  150/  468] time: 10.0830, train_loss: 0.20701993, train_accuracy: 0.9297, test_Accuracy: 0.9339\n",
      "Epoch: [ 0] [  151/  468] time: 10.1470, train_loss: 0.12735099, train_accuracy: 0.9766, test_Accuracy: 0.9336\n",
      "Epoch: [ 0] [  152/  468] time: 10.2183, train_loss: 0.26401287, train_accuracy: 0.9297, test_Accuracy: 0.9336\n",
      "Epoch: [ 0] [  153/  468] time: 10.2791, train_loss: 0.18827097, train_accuracy: 0.9688, test_Accuracy: 0.9330\n",
      "Epoch: [ 0] [  154/  468] time: 10.3417, train_loss: 0.20970742, train_accuracy: 0.9531, test_Accuracy: 0.9308\n",
      "Epoch: [ 0] [  155/  468] time: 10.4040, train_loss: 0.18685460, train_accuracy: 0.9531, test_Accuracy: 0.9303\n",
      "Epoch: [ 0] [  156/  468] time: 10.4659, train_loss: 0.15140763, train_accuracy: 0.9453, test_Accuracy: 0.9310\n",
      "Epoch: [ 0] [  157/  468] time: 10.5254, train_loss: 0.23904575, train_accuracy: 0.9141, test_Accuracy: 0.9318\n",
      "Epoch: [ 0] [  158/  468] time: 10.5889, train_loss: 0.19853538, train_accuracy: 0.9531, test_Accuracy: 0.9326\n",
      "Epoch: [ 0] [  159/  468] time: 10.6574, train_loss: 0.24184628, train_accuracy: 0.9297, test_Accuracy: 0.9321\n",
      "Epoch: [ 0] [  160/  468] time: 10.7264, train_loss: 0.26014471, train_accuracy: 0.9297, test_Accuracy: 0.9323\n",
      "Epoch: [ 0] [  161/  468] time: 10.7917, train_loss: 0.30580661, train_accuracy: 0.9297, test_Accuracy: 0.9338\n",
      "Epoch: [ 0] [  162/  468] time: 10.8561, train_loss: 0.26218826, train_accuracy: 0.9297, test_Accuracy: 0.9338\n",
      "Epoch: [ 0] [  163/  468] time: 10.9223, train_loss: 0.28629774, train_accuracy: 0.9297, test_Accuracy: 0.9353\n",
      "Epoch: [ 0] [  164/  468] time: 10.9899, train_loss: 0.21634729, train_accuracy: 0.9375, test_Accuracy: 0.9357\n",
      "Epoch: [ 0] [  165/  468] time: 11.0527, train_loss: 0.16663592, train_accuracy: 0.9531, test_Accuracy: 0.9364\n",
      "Epoch: [ 0] [  166/  468] time: 11.1223, train_loss: 0.15378216, train_accuracy: 0.9531, test_Accuracy: 0.9364\n",
      "Epoch: [ 0] [  167/  468] time: 11.1916, train_loss: 0.12565500, train_accuracy: 0.9609, test_Accuracy: 0.9348\n",
      "Epoch: [ 0] [  168/  468] time: 11.2621, train_loss: 0.20192313, train_accuracy: 0.9375, test_Accuracy: 0.9357\n",
      "Epoch: [ 0] [  169/  468] time: 11.3260, train_loss: 0.24121550, train_accuracy: 0.9609, test_Accuracy: 0.9362\n",
      "Epoch: [ 0] [  170/  468] time: 11.3907, train_loss: 0.26962650, train_accuracy: 0.9062, test_Accuracy: 0.9357\n",
      "Epoch: [ 0] [  171/  468] time: 11.4546, train_loss: 0.19346221, train_accuracy: 0.9375, test_Accuracy: 0.9359\n",
      "Epoch: [ 0] [  172/  468] time: 11.5197, train_loss: 0.31181312, train_accuracy: 0.9062, test_Accuracy: 0.9368\n",
      "Epoch: [ 0] [  173/  468] time: 11.5879, train_loss: 0.21878535, train_accuracy: 0.9141, test_Accuracy: 0.9339\n",
      "Epoch: [ 0] [  174/  468] time: 11.6513, train_loss: 0.26621988, train_accuracy: 0.8984, test_Accuracy: 0.9323\n",
      "Epoch: [ 0] [  175/  468] time: 11.7191, train_loss: 0.23929700, train_accuracy: 0.9219, test_Accuracy: 0.9311\n",
      "Epoch: [ 0] [  176/  468] time: 11.7874, train_loss: 0.17129299, train_accuracy: 0.9688, test_Accuracy: 0.9333\n",
      "Epoch: [ 0] [  177/  468] time: 11.8515, train_loss: 0.15566662, train_accuracy: 0.9609, test_Accuracy: 0.9326\n",
      "Epoch: [ 0] [  178/  468] time: 11.9191, train_loss: 0.25611895, train_accuracy: 0.9375, test_Accuracy: 0.9341\n",
      "Epoch: [ 0] [  179/  468] time: 11.9817, train_loss: 0.21760160, train_accuracy: 0.9531, test_Accuracy: 0.9360\n",
      "Epoch: [ 0] [  180/  468] time: 12.0461, train_loss: 0.28100407, train_accuracy: 0.9141, test_Accuracy: 0.9373\n",
      "Epoch: [ 0] [  181/  468] time: 12.1097, train_loss: 0.11019913, train_accuracy: 0.9766, test_Accuracy: 0.9360\n",
      "Epoch: [ 0] [  182/  468] time: 12.1742, train_loss: 0.28997257, train_accuracy: 0.9219, test_Accuracy: 0.9329\n",
      "Epoch: [ 0] [  183/  468] time: 12.2424, train_loss: 0.21221977, train_accuracy: 0.9375, test_Accuracy: 0.9320\n",
      "Epoch: [ 0] [  184/  468] time: 12.3046, train_loss: 0.18463030, train_accuracy: 0.9531, test_Accuracy: 0.9307\n",
      "Epoch: [ 0] [  185/  468] time: 12.3675, train_loss: 0.40376654, train_accuracy: 0.8984, test_Accuracy: 0.9318\n",
      "Epoch: [ 0] [  186/  468] time: 12.4319, train_loss: 0.36390668, train_accuracy: 0.8984, test_Accuracy: 0.9361\n",
      "Epoch: [ 0] [  187/  468] time: 12.4922, train_loss: 0.19459102, train_accuracy: 0.9609, test_Accuracy: 0.9399\n",
      "Epoch: [ 0] [  188/  468] time: 12.5561, train_loss: 0.26709583, train_accuracy: 0.9141, test_Accuracy: 0.9405\n",
      "Epoch: [ 0] [  189/  468] time: 12.6204, train_loss: 0.16187413, train_accuracy: 0.9531, test_Accuracy: 0.9373\n",
      "Epoch: [ 0] [  190/  468] time: 12.6887, train_loss: 0.21557309, train_accuracy: 0.9453, test_Accuracy: 0.9343\n",
      "Epoch: [ 0] [  191/  468] time: 12.7521, train_loss: 0.20924409, train_accuracy: 0.9297, test_Accuracy: 0.9318\n",
      "Epoch: [ 0] [  192/  468] time: 12.8150, train_loss: 0.17851961, train_accuracy: 0.9453, test_Accuracy: 0.9300\n",
      "Epoch: [ 0] [  193/  468] time: 12.8773, train_loss: 0.17647600, train_accuracy: 0.9688, test_Accuracy: 0.9295\n",
      "Epoch: [ 0] [  194/  468] time: 12.9396, train_loss: 0.20186451, train_accuracy: 0.9453, test_Accuracy: 0.9290\n",
      "Epoch: [ 0] [  195/  468] time: 13.0026, train_loss: 0.30085987, train_accuracy: 0.9062, test_Accuracy: 0.9331\n",
      "Epoch: [ 0] [  196/  468] time: 13.0665, train_loss: 0.25288510, train_accuracy: 0.9297, test_Accuracy: 0.9374\n",
      "Epoch: [ 0] [  197/  468] time: 13.1294, train_loss: 0.22284451, train_accuracy: 0.9141, test_Accuracy: 0.9409\n",
      "Epoch: [ 0] [  198/  468] time: 13.1923, train_loss: 0.22955456, train_accuracy: 0.9531, test_Accuracy: 0.9426\n",
      "Epoch: [ 0] [  199/  468] time: 13.2556, train_loss: 0.14807236, train_accuracy: 0.9688, test_Accuracy: 0.9432\n",
      "Epoch: [ 0] [  200/  468] time: 13.3194, train_loss: 0.19344939, train_accuracy: 0.9453, test_Accuracy: 0.9427\n",
      "Epoch: [ 0] [  201/  468] time: 13.3842, train_loss: 0.10729308, train_accuracy: 0.9766, test_Accuracy: 0.9421\n",
      "Epoch: [ 0] [  202/  468] time: 13.4518, train_loss: 0.19300880, train_accuracy: 0.9531, test_Accuracy: 0.9395\n",
      "Epoch: [ 0] [  203/  468] time: 13.5146, train_loss: 0.28988424, train_accuracy: 0.9297, test_Accuracy: 0.9388\n",
      "Epoch: [ 0] [  204/  468] time: 13.5770, train_loss: 0.14467123, train_accuracy: 0.9531, test_Accuracy: 0.9372\n",
      "Epoch: [ 0] [  205/  468] time: 13.6390, train_loss: 0.26135409, train_accuracy: 0.9219, test_Accuracy: 0.9379\n",
      "Epoch: [ 0] [  206/  468] time: 13.7023, train_loss: 0.24369448, train_accuracy: 0.9453, test_Accuracy: 0.9404\n",
      "Epoch: [ 0] [  207/  468] time: 13.7661, train_loss: 0.31016251, train_accuracy: 0.9297, test_Accuracy: 0.9432\n",
      "Epoch: [ 0] [  208/  468] time: 13.8328, train_loss: 0.17422202, train_accuracy: 0.9453, test_Accuracy: 0.9419\n",
      "Epoch: [ 0] [  209/  468] time: 13.9011, train_loss: 0.19645430, train_accuracy: 0.9375, test_Accuracy: 0.9426\n",
      "Epoch: [ 0] [  210/  468] time: 13.9643, train_loss: 0.30407646, train_accuracy: 0.9219, test_Accuracy: 0.9401\n",
      "Epoch: [ 0] [  211/  468] time: 14.0312, train_loss: 0.21614966, train_accuracy: 0.9375, test_Accuracy: 0.9388\n",
      "Epoch: [ 0] [  212/  468] time: 14.1003, train_loss: 0.20084229, train_accuracy: 0.9297, test_Accuracy: 0.9361\n",
      "Epoch: [ 0] [  213/  468] time: 14.1633, train_loss: 0.17122823, train_accuracy: 0.9531, test_Accuracy: 0.9356\n",
      "Epoch: [ 0] [  214/  468] time: 14.2245, train_loss: 0.22894615, train_accuracy: 0.9297, test_Accuracy: 0.9354\n",
      "Epoch: [ 0] [  215/  468] time: 14.2873, train_loss: 0.14916545, train_accuracy: 0.9453, test_Accuracy: 0.9368\n",
      "Epoch: [ 0] [  216/  468] time: 14.3496, train_loss: 0.20259288, train_accuracy: 0.9531, test_Accuracy: 0.9389\n",
      "Epoch: [ 0] [  217/  468] time: 14.4145, train_loss: 0.21272114, train_accuracy: 0.9141, test_Accuracy: 0.9410\n",
      "Epoch: [ 0] [  218/  468] time: 14.4837, train_loss: 0.09198902, train_accuracy: 0.9844, test_Accuracy: 0.9432\n",
      "Epoch: [ 0] [  219/  468] time: 14.5452, train_loss: 0.21268219, train_accuracy: 0.9297, test_Accuracy: 0.9433\n",
      "Epoch: [ 0] [  220/  468] time: 14.6073, train_loss: 0.21851614, train_accuracy: 0.9375, test_Accuracy: 0.9436\n",
      "Epoch: [ 0] [  221/  468] time: 14.6708, train_loss: 0.18859015, train_accuracy: 0.9219, test_Accuracy: 0.9446\n",
      "Epoch: [ 0] [  222/  468] time: 14.7333, train_loss: 0.17137623, train_accuracy: 0.9531, test_Accuracy: 0.9461\n",
      "Epoch: [ 0] [  223/  468] time: 14.7961, train_loss: 0.18547896, train_accuracy: 0.9297, test_Accuracy: 0.9448\n",
      "Epoch: [ 0] [  224/  468] time: 14.8607, train_loss: 0.15583740, train_accuracy: 0.9609, test_Accuracy: 0.9430\n",
      "Epoch: [ 0] [  225/  468] time: 14.9289, train_loss: 0.09408246, train_accuracy: 0.9609, test_Accuracy: 0.9415\n",
      "Epoch: [ 0] [  226/  468] time: 14.9922, train_loss: 0.25801441, train_accuracy: 0.9453, test_Accuracy: 0.9437\n",
      "Epoch: [ 0] [  227/  468] time: 15.0594, train_loss: 0.18609351, train_accuracy: 0.9297, test_Accuracy: 0.9450\n",
      "Epoch: [ 0] [  228/  468] time: 15.1244, train_loss: 0.23984939, train_accuracy: 0.9531, test_Accuracy: 0.9462\n",
      "Epoch: [ 0] [  229/  468] time: 15.1920, train_loss: 0.11845874, train_accuracy: 0.9688, test_Accuracy: 0.9457\n",
      "Epoch: [ 0] [  230/  468] time: 15.2592, train_loss: 0.13507420, train_accuracy: 0.9531, test_Accuracy: 0.9429\n",
      "Epoch: [ 0] [  231/  468] time: 15.3239, train_loss: 0.16931099, train_accuracy: 0.9453, test_Accuracy: 0.9411\n",
      "Epoch: [ 0] [  232/  468] time: 15.3886, train_loss: 0.10962739, train_accuracy: 0.9609, test_Accuracy: 0.9376\n",
      "Epoch: [ 0] [  233/  468] time: 15.4563, train_loss: 0.22747967, train_accuracy: 0.9219, test_Accuracy: 0.9365\n",
      "Epoch: [ 0] [  234/  468] time: 15.5198, train_loss: 0.17909330, train_accuracy: 0.9375, test_Accuracy: 0.9367\n",
      "Epoch: [ 0] [  235/  468] time: 15.5830, train_loss: 0.18007410, train_accuracy: 0.9453, test_Accuracy: 0.9392\n",
      "Epoch: [ 0] [  236/  468] time: 15.6454, train_loss: 0.23517385, train_accuracy: 0.9375, test_Accuracy: 0.9418\n",
      "Epoch: [ 0] [  237/  468] time: 15.7077, train_loss: 0.33373970, train_accuracy: 0.9141, test_Accuracy: 0.9414\n",
      "Epoch: [ 0] [  238/  468] time: 15.7718, train_loss: 0.17266987, train_accuracy: 0.9375, test_Accuracy: 0.9427\n",
      "Epoch: [ 0] [  239/  468] time: 15.8338, train_loss: 0.16654271, train_accuracy: 0.9609, test_Accuracy: 0.9427\n",
      "Epoch: [ 0] [  240/  468] time: 15.8981, train_loss: 0.22167265, train_accuracy: 0.9297, test_Accuracy: 0.9408\n",
      "Epoch: [ 0] [  241/  468] time: 15.9668, train_loss: 0.16515537, train_accuracy: 0.9531, test_Accuracy: 0.9411\n",
      "Epoch: [ 0] [  242/  468] time: 16.0302, train_loss: 0.12207457, train_accuracy: 0.9609, test_Accuracy: 0.9406\n",
      "Epoch: [ 0] [  243/  468] time: 16.0924, train_loss: 0.19602874, train_accuracy: 0.9219, test_Accuracy: 0.9408\n",
      "Epoch: [ 0] [  244/  468] time: 16.1567, train_loss: 0.12705606, train_accuracy: 0.9531, test_Accuracy: 0.9417\n",
      "Epoch: [ 0] [  245/  468] time: 16.2188, train_loss: 0.18990555, train_accuracy: 0.9375, test_Accuracy: 0.9403\n",
      "Epoch: [ 0] [  246/  468] time: 16.2811, train_loss: 0.18822896, train_accuracy: 0.9453, test_Accuracy: 0.9374\n",
      "Epoch: [ 0] [  247/  468] time: 16.3441, train_loss: 0.13464952, train_accuracy: 0.9609, test_Accuracy: 0.9347\n",
      "Epoch: [ 0] [  248/  468] time: 16.4072, train_loss: 0.17993836, train_accuracy: 0.9453, test_Accuracy: 0.9352\n",
      "Epoch: [ 0] [  249/  468] time: 16.4727, train_loss: 0.16900226, train_accuracy: 0.9453, test_Accuracy: 0.9373\n",
      "Epoch: [ 0] [  250/  468] time: 16.5410, train_loss: 0.08304411, train_accuracy: 0.9688, test_Accuracy: 0.9396\n",
      "Epoch: [ 0] [  251/  468] time: 16.6056, train_loss: 0.13254604, train_accuracy: 0.9609, test_Accuracy: 0.9394\n",
      "Epoch: [ 0] [  252/  468] time: 16.6657, train_loss: 0.15090413, train_accuracy: 0.9609, test_Accuracy: 0.9393\n",
      "Epoch: [ 0] [  253/  468] time: 16.7312, train_loss: 0.14597100, train_accuracy: 0.9375, test_Accuracy: 0.9391\n",
      "Epoch: [ 0] [  254/  468] time: 16.7977, train_loss: 0.21619566, train_accuracy: 0.9297, test_Accuracy: 0.9387\n",
      "Epoch: [ 0] [  255/  468] time: 16.8677, train_loss: 0.19479543, train_accuracy: 0.9375, test_Accuracy: 0.9415\n",
      "Epoch: [ 0] [  256/  468] time: 16.9312, train_loss: 0.23821461, train_accuracy: 0.9219, test_Accuracy: 0.9447\n",
      "Epoch: [ 0] [  257/  468] time: 16.9945, train_loss: 0.15256207, train_accuracy: 0.9609, test_Accuracy: 0.9479\n",
      "Epoch: [ 0] [  258/  468] time: 17.0593, train_loss: 0.14420956, train_accuracy: 0.9609, test_Accuracy: 0.9486\n",
      "Epoch: [ 0] [  259/  468] time: 17.1277, train_loss: 0.10448021, train_accuracy: 0.9766, test_Accuracy: 0.9494\n",
      "Epoch: [ 0] [  260/  468] time: 17.1915, train_loss: 0.14884621, train_accuracy: 0.9609, test_Accuracy: 0.9476\n",
      "Epoch: [ 0] [  261/  468] time: 17.2547, train_loss: 0.08840151, train_accuracy: 0.9922, test_Accuracy: 0.9457\n",
      "Epoch: [ 0] [  262/  468] time: 17.3170, train_loss: 0.15537246, train_accuracy: 0.9688, test_Accuracy: 0.9438\n",
      "Epoch: [ 0] [  263/  468] time: 17.3801, train_loss: 0.23006786, train_accuracy: 0.9609, test_Accuracy: 0.9437\n",
      "Epoch: [ 0] [  264/  468] time: 17.4423, train_loss: 0.26512757, train_accuracy: 0.9219, test_Accuracy: 0.9444\n",
      "Epoch: [ 0] [  265/  468] time: 17.5117, train_loss: 0.18329009, train_accuracy: 0.9375, test_Accuracy: 0.9463\n",
      "Epoch: [ 0] [  266/  468] time: 17.5801, train_loss: 0.20273292, train_accuracy: 0.9375, test_Accuracy: 0.9477\n",
      "Epoch: [ 0] [  267/  468] time: 17.6447, train_loss: 0.31603381, train_accuracy: 0.9062, test_Accuracy: 0.9487\n",
      "Epoch: [ 0] [  268/  468] time: 17.7076, train_loss: 0.18237367, train_accuracy: 0.9531, test_Accuracy: 0.9475\n",
      "Epoch: [ 0] [  269/  468] time: 17.7703, train_loss: 0.15045309, train_accuracy: 0.9609, test_Accuracy: 0.9444\n",
      "Epoch: [ 0] [  270/  468] time: 17.8329, train_loss: 0.16264787, train_accuracy: 0.9375, test_Accuracy: 0.9430\n",
      "Epoch: [ 0] [  271/  468] time: 17.8950, train_loss: 0.20969154, train_accuracy: 0.9531, test_Accuracy: 0.9407\n",
      "Epoch: [ 0] [  272/  468] time: 17.9589, train_loss: 0.15045774, train_accuracy: 0.9688, test_Accuracy: 0.9416\n",
      "Epoch: [ 0] [  273/  468] time: 18.0248, train_loss: 0.10204512, train_accuracy: 0.9688, test_Accuracy: 0.9419\n",
      "Epoch: [ 0] [  274/  468] time: 18.0874, train_loss: 0.26246679, train_accuracy: 0.9375, test_Accuracy: 0.9418\n",
      "Epoch: [ 0] [  275/  468] time: 18.1511, train_loss: 0.16111147, train_accuracy: 0.9531, test_Accuracy: 0.9434\n",
      "Epoch: [ 0] [  276/  468] time: 18.2198, train_loss: 0.18260711, train_accuracy: 0.9453, test_Accuracy: 0.9450\n",
      "Epoch: [ 0] [  277/  468] time: 18.2822, train_loss: 0.12992498, train_accuracy: 0.9609, test_Accuracy: 0.9459\n",
      "Epoch: [ 0] [  278/  468] time: 18.3444, train_loss: 0.24939424, train_accuracy: 0.9375, test_Accuracy: 0.9467\n",
      "Epoch: [ 0] [  279/  468] time: 18.4067, train_loss: 0.11031935, train_accuracy: 0.9688, test_Accuracy: 0.9486\n",
      "Epoch: [ 0] [  280/  468] time: 18.4715, train_loss: 0.12393784, train_accuracy: 0.9688, test_Accuracy: 0.9499\n",
      "Epoch: [ 0] [  281/  468] time: 18.5409, train_loss: 0.18343341, train_accuracy: 0.9219, test_Accuracy: 0.9503\n",
      "Epoch: [ 0] [  282/  468] time: 18.6046, train_loss: 0.12832984, train_accuracy: 0.9609, test_Accuracy: 0.9521\n",
      "Epoch: [ 0] [  283/  468] time: 18.6693, train_loss: 0.31793070, train_accuracy: 0.8906, test_Accuracy: 0.9530\n",
      "Epoch: [ 0] [  284/  468] time: 18.7384, train_loss: 0.20057589, train_accuracy: 0.9453, test_Accuracy: 0.9526\n",
      "Epoch: [ 0] [  285/  468] time: 18.8025, train_loss: 0.16021346, train_accuracy: 0.9609, test_Accuracy: 0.9521\n",
      "Epoch: [ 0] [  286/  468] time: 18.8649, train_loss: 0.10854636, train_accuracy: 0.9609, test_Accuracy: 0.9508\n",
      "Epoch: [ 0] [  287/  468] time: 18.9284, train_loss: 0.22608022, train_accuracy: 0.9453, test_Accuracy: 0.9487\n",
      "Epoch: [ 0] [  288/  468] time: 18.9954, train_loss: 0.16319956, train_accuracy: 0.9531, test_Accuracy: 0.9489\n",
      "Epoch: [ 0] [  289/  468] time: 19.0579, train_loss: 0.14877568, train_accuracy: 0.9531, test_Accuracy: 0.9472\n",
      "Epoch: [ 0] [  290/  468] time: 19.1216, train_loss: 0.33111796, train_accuracy: 0.9062, test_Accuracy: 0.9477\n",
      "Epoch: [ 0] [  291/  468] time: 19.1881, train_loss: 0.18170239, train_accuracy: 0.9609, test_Accuracy: 0.9464\n",
      "Epoch: [ 0] [  292/  468] time: 19.2508, train_loss: 0.28194192, train_accuracy: 0.9219, test_Accuracy: 0.9480\n",
      "Epoch: [ 0] [  293/  468] time: 19.3145, train_loss: 0.09270352, train_accuracy: 0.9844, test_Accuracy: 0.9508\n",
      "Epoch: [ 0] [  294/  468] time: 19.3837, train_loss: 0.13562542, train_accuracy: 0.9453, test_Accuracy: 0.9506\n",
      "Epoch: [ 0] [  295/  468] time: 19.4519, train_loss: 0.18207747, train_accuracy: 0.9688, test_Accuracy: 0.9498\n",
      "Epoch: [ 0] [  296/  468] time: 19.5111, train_loss: 0.21804331, train_accuracy: 0.9375, test_Accuracy: 0.9499\n",
      "Epoch: [ 0] [  297/  468] time: 19.5727, train_loss: 0.19108638, train_accuracy: 0.9531, test_Accuracy: 0.9473\n",
      "Epoch: [ 0] [  298/  468] time: 19.6397, train_loss: 0.24690396, train_accuracy: 0.9219, test_Accuracy: 0.9472\n",
      "Epoch: [ 0] [  299/  468] time: 19.7019, train_loss: 0.21384954, train_accuracy: 0.9375, test_Accuracy: 0.9489\n",
      "Epoch: [ 0] [  300/  468] time: 19.7639, train_loss: 0.11762508, train_accuracy: 0.9688, test_Accuracy: 0.9496\n",
      "Epoch: [ 0] [  301/  468] time: 19.8284, train_loss: 0.24256656, train_accuracy: 0.9297, test_Accuracy: 0.9512\n",
      "Epoch: [ 0] [  302/  468] time: 19.8886, train_loss: 0.26786625, train_accuracy: 0.9141, test_Accuracy: 0.9516\n",
      "Epoch: [ 0] [  303/  468] time: 19.9513, train_loss: 0.13000701, train_accuracy: 0.9766, test_Accuracy: 0.9483\n",
      "Epoch: [ 0] [  304/  468] time: 20.0174, train_loss: 0.18965614, train_accuracy: 0.9531, test_Accuracy: 0.9461\n",
      "Epoch: [ 0] [  305/  468] time: 20.0776, train_loss: 0.23279592, train_accuracy: 0.9453, test_Accuracy: 0.9456\n",
      "Epoch: [ 0] [  306/  468] time: 20.1396, train_loss: 0.22096774, train_accuracy: 0.8984, test_Accuracy: 0.9461\n",
      "Epoch: [ 0] [  307/  468] time: 20.2051, train_loss: 0.12117896, train_accuracy: 0.9688, test_Accuracy: 0.9477\n",
      "Epoch: [ 0] [  308/  468] time: 20.2716, train_loss: 0.19755498, train_accuracy: 0.9531, test_Accuracy: 0.9503\n",
      "Epoch: [ 0] [  309/  468] time: 20.3382, train_loss: 0.09908164, train_accuracy: 0.9844, test_Accuracy: 0.9506\n",
      "Epoch: [ 0] [  310/  468] time: 20.4023, train_loss: 0.17664458, train_accuracy: 0.9609, test_Accuracy: 0.9499\n",
      "Epoch: [ 0] [  311/  468] time: 20.4714, train_loss: 0.13593948, train_accuracy: 0.9531, test_Accuracy: 0.9513\n",
      "Epoch: [ 0] [  312/  468] time: 20.5317, train_loss: 0.23368984, train_accuracy: 0.9219, test_Accuracy: 0.9511\n",
      "Epoch: [ 0] [  313/  468] time: 20.5944, train_loss: 0.15515658, train_accuracy: 0.9375, test_Accuracy: 0.9506\n",
      "Epoch: [ 0] [  314/  468] time: 20.6555, train_loss: 0.06905576, train_accuracy: 0.9844, test_Accuracy: 0.9498\n",
      "Epoch: [ 0] [  315/  468] time: 20.7165, train_loss: 0.12181813, train_accuracy: 0.9766, test_Accuracy: 0.9483\n",
      "Epoch: [ 0] [  316/  468] time: 20.7799, train_loss: 0.21635646, train_accuracy: 0.9609, test_Accuracy: 0.9473\n",
      "Epoch: [ 0] [  317/  468] time: 20.8426, train_loss: 0.13284034, train_accuracy: 0.9531, test_Accuracy: 0.9489\n",
      "Epoch: [ 0] [  318/  468] time: 20.9050, train_loss: 0.11632860, train_accuracy: 0.9766, test_Accuracy: 0.9505\n",
      "Epoch: [ 0] [  319/  468] time: 20.9677, train_loss: 0.12658577, train_accuracy: 0.9688, test_Accuracy: 0.9517\n",
      "Epoch: [ 0] [  320/  468] time: 21.0354, train_loss: 0.16090462, train_accuracy: 0.9141, test_Accuracy: 0.9527\n",
      "Epoch: [ 0] [  321/  468] time: 21.1019, train_loss: 0.13145748, train_accuracy: 0.9688, test_Accuracy: 0.9533\n",
      "Epoch: [ 0] [  322/  468] time: 21.1649, train_loss: 0.15540302, train_accuracy: 0.9375, test_Accuracy: 0.9520\n",
      "Epoch: [ 0] [  323/  468] time: 21.2284, train_loss: 0.13903449, train_accuracy: 0.9609, test_Accuracy: 0.9493\n",
      "Epoch: [ 0] [  324/  468] time: 21.2909, train_loss: 0.11582096, train_accuracy: 0.9844, test_Accuracy: 0.9480\n",
      "Epoch: [ 0] [  325/  468] time: 21.3563, train_loss: 0.13674164, train_accuracy: 0.9766, test_Accuracy: 0.9472\n",
      "Epoch: [ 0] [  326/  468] time: 21.4244, train_loss: 0.07918728, train_accuracy: 0.9766, test_Accuracy: 0.9468\n",
      "Epoch: [ 0] [  327/  468] time: 21.4864, train_loss: 0.19218318, train_accuracy: 0.9609, test_Accuracy: 0.9473\n",
      "Epoch: [ 0] [  328/  468] time: 21.5533, train_loss: 0.11650534, train_accuracy: 0.9688, test_Accuracy: 0.9478\n",
      "Epoch: [ 0] [  329/  468] time: 21.6169, train_loss: 0.26900649, train_accuracy: 0.9219, test_Accuracy: 0.9509\n",
      "Epoch: [ 0] [  330/  468] time: 21.6862, train_loss: 0.27207446, train_accuracy: 0.9219, test_Accuracy: 0.9510\n",
      "Epoch: [ 0] [  331/  468] time: 21.7497, train_loss: 0.14840731, train_accuracy: 0.9766, test_Accuracy: 0.9503\n",
      "Epoch: [ 0] [  332/  468] time: 21.8183, train_loss: 0.10469952, train_accuracy: 0.9844, test_Accuracy: 0.9509\n",
      "Epoch: [ 0] [  333/  468] time: 21.8807, train_loss: 0.14829560, train_accuracy: 0.9453, test_Accuracy: 0.9497\n",
      "Epoch: [ 0] [  334/  468] time: 21.9511, train_loss: 0.16637677, train_accuracy: 0.9375, test_Accuracy: 0.9499\n",
      "Epoch: [ 0] [  335/  468] time: 22.0197, train_loss: 0.15973413, train_accuracy: 0.9531, test_Accuracy: 0.9514\n",
      "Epoch: [ 0] [  336/  468] time: 22.0827, train_loss: 0.13163112, train_accuracy: 0.9609, test_Accuracy: 0.9509\n",
      "Epoch: [ 0] [  337/  468] time: 22.1454, train_loss: 0.22416487, train_accuracy: 0.9453, test_Accuracy: 0.9497\n",
      "Epoch: [ 0] [  338/  468] time: 22.2101, train_loss: 0.09846752, train_accuracy: 0.9688, test_Accuracy: 0.9476\n",
      "Epoch: [ 0] [  339/  468] time: 22.2787, train_loss: 0.11697941, train_accuracy: 0.9688, test_Accuracy: 0.9484\n",
      "Epoch: [ 0] [  340/  468] time: 22.3416, train_loss: 0.19181004, train_accuracy: 0.9375, test_Accuracy: 0.9511\n",
      "Epoch: [ 0] [  341/  468] time: 22.4045, train_loss: 0.11550222, train_accuracy: 0.9609, test_Accuracy: 0.9525\n",
      "Epoch: [ 0] [  342/  468] time: 22.4679, train_loss: 0.23846966, train_accuracy: 0.9453, test_Accuracy: 0.9536\n",
      "Epoch: [ 0] [  343/  468] time: 22.5321, train_loss: 0.14533901, train_accuracy: 0.9375, test_Accuracy: 0.9546\n",
      "Epoch: [ 0] [  344/  468] time: 22.5970, train_loss: 0.23453417, train_accuracy: 0.9219, test_Accuracy: 0.9534\n",
      "Epoch: [ 0] [  345/  468] time: 22.6647, train_loss: 0.25094193, train_accuracy: 0.9297, test_Accuracy: 0.9555\n",
      "Epoch: [ 0] [  346/  468] time: 22.7272, train_loss: 0.21908596, train_accuracy: 0.9297, test_Accuracy: 0.9573\n",
      "Epoch: [ 0] [  347/  468] time: 22.7891, train_loss: 0.07883266, train_accuracy: 0.9844, test_Accuracy: 0.9560\n",
      "Epoch: [ 0] [  348/  468] time: 22.8532, train_loss: 0.09728864, train_accuracy: 0.9688, test_Accuracy: 0.9539\n",
      "Epoch: [ 0] [  349/  468] time: 22.9157, train_loss: 0.29778475, train_accuracy: 0.8984, test_Accuracy: 0.9538\n",
      "Epoch: [ 0] [  350/  468] time: 22.9808, train_loss: 0.13240150, train_accuracy: 0.9453, test_Accuracy: 0.9539\n",
      "Epoch: [ 0] [  351/  468] time: 23.0498, train_loss: 0.13097955, train_accuracy: 0.9688, test_Accuracy: 0.9541\n",
      "Epoch: [ 0] [  352/  468] time: 23.1128, train_loss: 0.17017686, train_accuracy: 0.9453, test_Accuracy: 0.9546\n",
      "Epoch: [ 0] [  353/  468] time: 23.1728, train_loss: 0.25042775, train_accuracy: 0.9219, test_Accuracy: 0.9573\n",
      "Epoch: [ 0] [  354/  468] time: 23.2346, train_loss: 0.17115188, train_accuracy: 0.9453, test_Accuracy: 0.9593\n",
      "Epoch: [ 0] [  355/  468] time: 23.2968, train_loss: 0.16789895, train_accuracy: 0.9375, test_Accuracy: 0.9604\n",
      "Epoch: [ 0] [  356/  468] time: 23.3589, train_loss: 0.12267414, train_accuracy: 0.9531, test_Accuracy: 0.9600\n",
      "Epoch: [ 0] [  357/  468] time: 23.4202, train_loss: 0.15038356, train_accuracy: 0.9609, test_Accuracy: 0.9598\n",
      "Epoch: [ 0] [  358/  468] time: 23.4849, train_loss: 0.10218443, train_accuracy: 0.9766, test_Accuracy: 0.9590\n",
      "Epoch: [ 0] [  359/  468] time: 23.5452, train_loss: 0.22371671, train_accuracy: 0.9375, test_Accuracy: 0.9575\n",
      "Epoch: [ 0] [  360/  468] time: 23.6079, train_loss: 0.22820787, train_accuracy: 0.9453, test_Accuracy: 0.9573\n",
      "Epoch: [ 0] [  361/  468] time: 23.6695, train_loss: 0.10332601, train_accuracy: 0.9688, test_Accuracy: 0.9567\n",
      "Epoch: [ 0] [  362/  468] time: 23.7320, train_loss: 0.12835130, train_accuracy: 0.9844, test_Accuracy: 0.9564\n",
      "Epoch: [ 0] [  363/  468] time: 23.7979, train_loss: 0.20942825, train_accuracy: 0.9297, test_Accuracy: 0.9566\n",
      "Epoch: [ 0] [  364/  468] time: 23.8620, train_loss: 0.20668277, train_accuracy: 0.9297, test_Accuracy: 0.9546\n",
      "Epoch: [ 0] [  365/  468] time: 23.9257, train_loss: 0.19840994, train_accuracy: 0.9609, test_Accuracy: 0.9536\n",
      "Epoch: [ 0] [  366/  468] time: 23.9895, train_loss: 0.15330294, train_accuracy: 0.9297, test_Accuracy: 0.9542\n",
      "Epoch: [ 0] [  367/  468] time: 24.0513, train_loss: 0.15145615, train_accuracy: 0.9375, test_Accuracy: 0.9549\n",
      "Epoch: [ 0] [  368/  468] time: 24.1169, train_loss: 0.11828429, train_accuracy: 0.9609, test_Accuracy: 0.9568\n",
      "Epoch: [ 0] [  369/  468] time: 24.1853, train_loss: 0.15635167, train_accuracy: 0.9531, test_Accuracy: 0.9577\n",
      "Epoch: [ 0] [  370/  468] time: 24.2490, train_loss: 0.20250762, train_accuracy: 0.9141, test_Accuracy: 0.9576\n",
      "Epoch: [ 0] [  371/  468] time: 24.3182, train_loss: 0.14351952, train_accuracy: 0.9766, test_Accuracy: 0.9580\n",
      "Epoch: [ 0] [  372/  468] time: 24.3869, train_loss: 0.14940694, train_accuracy: 0.9375, test_Accuracy: 0.9579\n",
      "Epoch: [ 0] [  373/  468] time: 24.4526, train_loss: 0.15329728, train_accuracy: 0.9375, test_Accuracy: 0.9569\n",
      "Epoch: [ 0] [  374/  468] time: 24.5196, train_loss: 0.14936291, train_accuracy: 0.9453, test_Accuracy: 0.9565\n",
      "Epoch: [ 0] [  375/  468] time: 24.5828, train_loss: 0.11170685, train_accuracy: 0.9688, test_Accuracy: 0.9570\n",
      "Epoch: [ 0] [  376/  468] time: 24.6468, train_loss: 0.06508955, train_accuracy: 0.9844, test_Accuracy: 0.9582\n",
      "Epoch: [ 0] [  377/  468] time: 24.7099, train_loss: 0.11285035, train_accuracy: 0.9688, test_Accuracy: 0.9586\n",
      "Epoch: [ 0] [  378/  468] time: 24.7723, train_loss: 0.14660934, train_accuracy: 0.9766, test_Accuracy: 0.9590\n",
      "Epoch: [ 0] [  379/  468] time: 24.8351, train_loss: 0.08354259, train_accuracy: 0.9766, test_Accuracy: 0.9595\n",
      "Epoch: [ 0] [  380/  468] time: 24.8981, train_loss: 0.10307617, train_accuracy: 0.9766, test_Accuracy: 0.9591\n",
      "Epoch: [ 0] [  381/  468] time: 24.9605, train_loss: 0.22898003, train_accuracy: 0.9219, test_Accuracy: 0.9595\n",
      "Epoch: [ 0] [  382/  468] time: 25.0240, train_loss: 0.24139786, train_accuracy: 0.9453, test_Accuracy: 0.9593\n",
      "Epoch: [ 0] [  383/  468] time: 25.0877, train_loss: 0.12180964, train_accuracy: 0.9844, test_Accuracy: 0.9604\n",
      "Epoch: [ 0] [  384/  468] time: 25.1560, train_loss: 0.10469311, train_accuracy: 0.9766, test_Accuracy: 0.9597\n",
      "Epoch: [ 0] [  385/  468] time: 25.2149, train_loss: 0.08545208, train_accuracy: 0.9688, test_Accuracy: 0.9589\n",
      "Epoch: [ 0] [  386/  468] time: 25.2793, train_loss: 0.17765012, train_accuracy: 0.9609, test_Accuracy: 0.9590\n",
      "Epoch: [ 0] [  387/  468] time: 25.3429, train_loss: 0.09242272, train_accuracy: 0.9688, test_Accuracy: 0.9591\n",
      "Epoch: [ 0] [  388/  468] time: 25.4107, train_loss: 0.07313786, train_accuracy: 0.9766, test_Accuracy: 0.9588\n",
      "Epoch: [ 0] [  389/  468] time: 25.4727, train_loss: 0.10273741, train_accuracy: 0.9531, test_Accuracy: 0.9584\n",
      "Epoch: [ 0] [  390/  468] time: 25.5348, train_loss: 0.08603522, train_accuracy: 0.9688, test_Accuracy: 0.9585\n",
      "Epoch: [ 0] [  391/  468] time: 25.5973, train_loss: 0.09784339, train_accuracy: 0.9766, test_Accuracy: 0.9585\n",
      "Epoch: [ 0] [  392/  468] time: 25.6609, train_loss: 0.12184306, train_accuracy: 0.9609, test_Accuracy: 0.9583\n",
      "Epoch: [ 0] [  393/  468] time: 25.7273, train_loss: 0.11924485, train_accuracy: 0.9688, test_Accuracy: 0.9589\n",
      "Epoch: [ 0] [  394/  468] time: 25.7896, train_loss: 0.11024389, train_accuracy: 0.9688, test_Accuracy: 0.9589\n",
      "Epoch: [ 0] [  395/  468] time: 25.8522, train_loss: 0.14142339, train_accuracy: 0.9531, test_Accuracy: 0.9588\n",
      "Epoch: [ 0] [  396/  468] time: 25.9142, train_loss: 0.09411883, train_accuracy: 0.9766, test_Accuracy: 0.9589\n",
      "Epoch: [ 0] [  397/  468] time: 25.9765, train_loss: 0.10143741, train_accuracy: 0.9531, test_Accuracy: 0.9588\n",
      "Epoch: [ 0] [  398/  468] time: 26.0391, train_loss: 0.14250627, train_accuracy: 0.9531, test_Accuracy: 0.9589\n",
      "Epoch: [ 0] [  399/  468] time: 26.1088, train_loss: 0.11759236, train_accuracy: 0.9766, test_Accuracy: 0.9594\n",
      "Epoch: [ 0] [  400/  468] time: 26.1688, train_loss: 0.26683292, train_accuracy: 0.9219, test_Accuracy: 0.9603\n",
      "Epoch: [ 0] [  401/  468] time: 26.2297, train_loss: 0.13866900, train_accuracy: 0.9688, test_Accuracy: 0.9600\n",
      "Epoch: [ 0] [  402/  468] time: 26.2932, train_loss: 0.12512949, train_accuracy: 0.9609, test_Accuracy: 0.9587\n",
      "Epoch: [ 0] [  403/  468] time: 26.3585, train_loss: 0.13897370, train_accuracy: 0.9531, test_Accuracy: 0.9585\n",
      "Epoch: [ 0] [  404/  468] time: 26.4276, train_loss: 0.08184302, train_accuracy: 0.9688, test_Accuracy: 0.9584\n",
      "Epoch: [ 0] [  405/  468] time: 26.4981, train_loss: 0.12624426, train_accuracy: 0.9609, test_Accuracy: 0.9593\n",
      "Epoch: [ 0] [  406/  468] time: 26.5639, train_loss: 0.18077943, train_accuracy: 0.9453, test_Accuracy: 0.9618\n",
      "Epoch: [ 0] [  407/  468] time: 26.6247, train_loss: 0.07122968, train_accuracy: 0.9844, test_Accuracy: 0.9618\n",
      "Epoch: [ 0] [  408/  468] time: 26.6874, train_loss: 0.16445535, train_accuracy: 0.9453, test_Accuracy: 0.9618\n",
      "Epoch: [ 0] [  409/  468] time: 26.7490, train_loss: 0.07451659, train_accuracy: 0.9766, test_Accuracy: 0.9610\n",
      "Epoch: [ 0] [  410/  468] time: 26.8122, train_loss: 0.13848600, train_accuracy: 0.9688, test_Accuracy: 0.9600\n",
      "Epoch: [ 0] [  411/  468] time: 26.8746, train_loss: 0.11078284, train_accuracy: 0.9688, test_Accuracy: 0.9596\n",
      "Epoch: [ 0] [  412/  468] time: 26.9379, train_loss: 0.18847153, train_accuracy: 0.9297, test_Accuracy: 0.9601\n",
      "Epoch: [ 0] [  413/  468] time: 27.0001, train_loss: 0.16096875, train_accuracy: 0.9609, test_Accuracy: 0.9597\n",
      "Epoch: [ 0] [  414/  468] time: 27.0623, train_loss: 0.07733957, train_accuracy: 0.9766, test_Accuracy: 0.9602\n",
      "Epoch: [ 0] [  415/  468] time: 27.1247, train_loss: 0.19053829, train_accuracy: 0.9219, test_Accuracy: 0.9601\n",
      "Epoch: [ 0] [  416/  468] time: 27.1884, train_loss: 0.13668457, train_accuracy: 0.9453, test_Accuracy: 0.9605\n",
      "Epoch: [ 0] [  417/  468] time: 27.2523, train_loss: 0.12377734, train_accuracy: 0.9688, test_Accuracy: 0.9606\n",
      "Epoch: [ 0] [  418/  468] time: 27.3165, train_loss: 0.10995129, train_accuracy: 0.9688, test_Accuracy: 0.9608\n",
      "Epoch: [ 0] [  419/  468] time: 27.3808, train_loss: 0.08699502, train_accuracy: 0.9766, test_Accuracy: 0.9591\n",
      "Epoch: [ 0] [  420/  468] time: 27.4444, train_loss: 0.17479241, train_accuracy: 0.9453, test_Accuracy: 0.9588\n",
      "Epoch: [ 0] [  421/  468] time: 27.5073, train_loss: 0.10236223, train_accuracy: 0.9531, test_Accuracy: 0.9580\n",
      "Epoch: [ 0] [  422/  468] time: 27.5747, train_loss: 0.12555426, train_accuracy: 0.9531, test_Accuracy: 0.9592\n",
      "Epoch: [ 0] [  423/  468] time: 27.6373, train_loss: 0.10202809, train_accuracy: 0.9844, test_Accuracy: 0.9604\n",
      "Epoch: [ 0] [  424/  468] time: 27.7002, train_loss: 0.19217573, train_accuracy: 0.9297, test_Accuracy: 0.9608\n",
      "Epoch: [ 0] [  425/  468] time: 27.7676, train_loss: 0.19736248, train_accuracy: 0.9453, test_Accuracy: 0.9611\n",
      "Epoch: [ 0] [  426/  468] time: 27.8326, train_loss: 0.10438697, train_accuracy: 0.9688, test_Accuracy: 0.9608\n",
      "Epoch: [ 0] [  427/  468] time: 27.9011, train_loss: 0.11535507, train_accuracy: 0.9531, test_Accuracy: 0.9608\n",
      "Epoch: [ 0] [  428/  468] time: 27.9650, train_loss: 0.30192083, train_accuracy: 0.9219, test_Accuracy: 0.9605\n",
      "Epoch: [ 0] [  429/  468] time: 28.0288, train_loss: 0.06889732, train_accuracy: 0.9766, test_Accuracy: 0.9595\n",
      "Epoch: [ 0] [  430/  468] time: 28.0920, train_loss: 0.14585552, train_accuracy: 0.9453, test_Accuracy: 0.9590\n",
      "Epoch: [ 0] [  431/  468] time: 28.1554, train_loss: 0.14661206, train_accuracy: 0.9531, test_Accuracy: 0.9591\n",
      "Epoch: [ 0] [  432/  468] time: 28.2211, train_loss: 0.15558314, train_accuracy: 0.9609, test_Accuracy: 0.9584\n",
      "Epoch: [ 0] [  433/  468] time: 28.2856, train_loss: 0.07589941, train_accuracy: 0.9922, test_Accuracy: 0.9584\n",
      "Epoch: [ 0] [  434/  468] time: 28.3490, train_loss: 0.12326811, train_accuracy: 0.9688, test_Accuracy: 0.9576\n",
      "Epoch: [ 0] [  435/  468] time: 28.4156, train_loss: 0.07672018, train_accuracy: 0.9844, test_Accuracy: 0.9575\n",
      "Epoch: [ 0] [  436/  468] time: 28.4791, train_loss: 0.07009517, train_accuracy: 0.9766, test_Accuracy: 0.9569\n",
      "Epoch: [ 0] [  437/  468] time: 28.5414, train_loss: 0.11589304, train_accuracy: 0.9531, test_Accuracy: 0.9564\n",
      "Epoch: [ 0] [  438/  468] time: 28.6045, train_loss: 0.10705900, train_accuracy: 0.9609, test_Accuracy: 0.9560\n",
      "Epoch: [ 0] [  439/  468] time: 28.6679, train_loss: 0.14081585, train_accuracy: 0.9766, test_Accuracy: 0.9557\n",
      "Epoch: [ 0] [  440/  468] time: 28.7381, train_loss: 0.11345895, train_accuracy: 0.9531, test_Accuracy: 0.9566\n",
      "Epoch: [ 0] [  441/  468] time: 28.8064, train_loss: 0.10201301, train_accuracy: 0.9844, test_Accuracy: 0.9582\n",
      "Epoch: [ 0] [  442/  468] time: 28.8697, train_loss: 0.09390710, train_accuracy: 0.9688, test_Accuracy: 0.9590\n",
      "Epoch: [ 0] [  443/  468] time: 28.9323, train_loss: 0.05298387, train_accuracy: 0.9922, test_Accuracy: 0.9600\n",
      "Epoch: [ 0] [  444/  468] time: 28.9958, train_loss: 0.10526479, train_accuracy: 0.9688, test_Accuracy: 0.9605\n",
      "Epoch: [ 0] [  445/  468] time: 29.0591, train_loss: 0.18880352, train_accuracy: 0.9609, test_Accuracy: 0.9614\n",
      "Epoch: [ 0] [  446/  468] time: 29.1224, train_loss: 0.07556506, train_accuracy: 0.9766, test_Accuracy: 0.9609\n",
      "Epoch: [ 0] [  447/  468] time: 29.1899, train_loss: 0.08863348, train_accuracy: 0.9688, test_Accuracy: 0.9598\n",
      "Epoch: [ 0] [  448/  468] time: 29.2528, train_loss: 0.11687736, train_accuracy: 0.9688, test_Accuracy: 0.9597\n",
      "Epoch: [ 0] [  449/  468] time: 29.3156, train_loss: 0.14835452, train_accuracy: 0.9531, test_Accuracy: 0.9601\n",
      "Epoch: [ 0] [  450/  468] time: 29.3786, train_loss: 0.06202551, train_accuracy: 0.9844, test_Accuracy: 0.9596\n",
      "Epoch: [ 0] [  451/  468] time: 29.4461, train_loss: 0.08676247, train_accuracy: 0.9609, test_Accuracy: 0.9616\n",
      "Epoch: [ 0] [  452/  468] time: 29.5149, train_loss: 0.17891863, train_accuracy: 0.9453, test_Accuracy: 0.9627\n",
      "Epoch: [ 0] [  453/  468] time: 29.5848, train_loss: 0.16238397, train_accuracy: 0.9453, test_Accuracy: 0.9616\n",
      "Epoch: [ 0] [  454/  468] time: 29.6475, train_loss: 0.09896985, train_accuracy: 0.9844, test_Accuracy: 0.9592\n",
      "Epoch: [ 0] [  455/  468] time: 29.7174, train_loss: 0.15600440, train_accuracy: 0.9375, test_Accuracy: 0.9584\n",
      "Epoch: [ 0] [  456/  468] time: 29.7810, train_loss: 0.14710057, train_accuracy: 0.9531, test_Accuracy: 0.9588\n",
      "Epoch: [ 0] [  457/  468] time: 29.8498, train_loss: 0.22105309, train_accuracy: 0.9375, test_Accuracy: 0.9596\n",
      "Epoch: [ 0] [  458/  468] time: 29.9134, train_loss: 0.23192221, train_accuracy: 0.9453, test_Accuracy: 0.9607\n",
      "Epoch: [ 0] [  459/  468] time: 29.9774, train_loss: 0.11595625, train_accuracy: 0.9609, test_Accuracy: 0.9613\n",
      "Epoch: [ 0] [  460/  468] time: 30.0415, train_loss: 0.09045023, train_accuracy: 0.9766, test_Accuracy: 0.9610\n",
      "Epoch: [ 0] [  461/  468] time: 30.1045, train_loss: 0.10647696, train_accuracy: 0.9688, test_Accuracy: 0.9594\n",
      "Epoch: [ 0] [  462/  468] time: 30.1673, train_loss: 0.13123319, train_accuracy: 0.9531, test_Accuracy: 0.9581\n",
      "Epoch: [ 0] [  463/  468] time: 30.2327, train_loss: 0.08542545, train_accuracy: 0.9766, test_Accuracy: 0.9549\n",
      "Epoch: [ 0] [  464/  468] time: 30.2968, train_loss: 0.17014994, train_accuracy: 0.9609, test_Accuracy: 0.9548\n",
      "Epoch: [ 0] [  465/  468] time: 30.3654, train_loss: 0.15981455, train_accuracy: 0.9453, test_Accuracy: 0.9561\n",
      "Epoch: [ 0] [  466/  468] time: 30.4288, train_loss: 0.13024296, train_accuracy: 0.9609, test_Accuracy: 0.9584\n",
      "Epoch: [ 0] [  467/  468] time: 30.4939, train_loss: 0.11242802, train_accuracy: 0.9688, test_Accuracy: 0.9599\n"
     ]
    }
   ],
   "source": [
    "if train_flag :\n",
    "    # 네트워크가 학습을 하다가 끊겼을 때 다시 재학습을 이뤄낸다\n",
    "    # 학습종료 후 테스트 이미지에 대해 테스트를 가능하게 함\n",
    "    # 학습되어서 저장된 웨이트를 불러오는 데 도움\n",
    "    checkpoint = tf.train.Checkpoint(dnn=network)\n",
    "\n",
    "    # create writer for tensorboard\n",
    "    summary_writer = tf.summary.create_file_writer(logdir=logs_dir)\n",
    "    start_time = time()\n",
    "\n",
    "    # restore check-point if it exits\n",
    "    could_load, checkpoint_counter = load(network, checkpoint_dir)    \n",
    "\n",
    "    if could_load:\n",
    "        start_epoch = (int)(checkpoint_counter / training_iterations)        \n",
    "        counter = checkpoint_counter        \n",
    "        print(\" [*] Load SUCCESS\")\n",
    "    else:\n",
    "        start_epoch = 0\n",
    "        start_iteration = 0\n",
    "        counter = 0\n",
    "        print(\" [!] Load failed...\")\n",
    "    \n",
    "    # train phase\n",
    "    with summary_writer.as_default():  # for tensorboard\n",
    "        for epoch in range(start_epoch, training_epochs):\n",
    "            for idx, (train_input, train_label) in enumerate(train_dataset):                \n",
    "                grads = grad(network, train_input, train_label)\n",
    "                # gradient 적용후 학습을 시킴\n",
    "                optimizer.apply_gradients(grads_and_vars=zip(grads, network.variables))\n",
    "\n",
    "                train_loss = loss_fn(network, train_input, train_label)\n",
    "                train_accuracy = accuracy_fn(network, train_input, train_label)\n",
    "\n",
    "                for test_input, test_label in test_dataset:                \n",
    "                    test_accuracy = accuracy_fn(network, test_input, test_label)\n",
    "\n",
    "                tf.summary.scalar(name='train_loss', data=train_loss, step=counter)\n",
    "                tf.summary.scalar(name='train_accuracy', data=train_accuracy, step=counter)\n",
    "                tf.summary.scalar(name='test_accuracy', data=test_accuracy, step=counter)\n",
    "\n",
    "                print(\n",
    "                    \"Epoch: [%2d] [%5d/%5d] time: %4.4f, train_loss: %.8f, train_accuracy: %.4f, test_Accuracy: %.4f\" \\\n",
    "                    % (epoch, idx, training_iterations, time() - start_time, train_loss, train_accuracy,\n",
    "                       test_accuracy))\n",
    "                counter += 1  \n",
    "        # weight 파일저장\n",
    "        checkpoint.save(file_prefix=checkpoint_prefix + '-{}'.format(counter))\n",
    "\n",
    "# test phase      \n",
    "else :\n",
    "    _, _ = load(network, checkpoint_dir)\n",
    "    for test_input, test_label in test_dataset:    \n",
    "        test_accuracy = accuracy_fn(network, test_input, test_label)\n",
    "\n",
    "    print(\"test_Accuracy: %.4f\" % (test_accuracy))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
